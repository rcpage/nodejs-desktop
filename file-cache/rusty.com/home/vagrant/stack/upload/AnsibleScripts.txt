#Attach the Extra Packages pool to make Ansible packages available:
subscription-manager register
subscription-manager subscribe
subscription-manager attach --pool=`subscription-manager list --all --available --matches "*Extra Packages*" --pool-only`

yum -y install ansible

ansible --version

vi /etc/ansible/hosts

[web]
servera.example.com

[sql]
serverb.example.com


ssh-copy-id -i .ssh/open servera.example.com
ssh-copy-id -i .ssh/open serverb.example.com

ansible -m ping all

#Use an ad hoc command to get the list of facts available for servera:
ansible web -m setup

#Install an Apache server on the web server (servera):
ansible web -b -m yum -a "name=httpd state=present"


#Manually confirm that the package was installed:
ssh servera.example.com "rpm -qa | grep httpd-[0-9]*"

#Start the Apache server:
ansible web -b -m service -a "name=httpd state=started"

#Manually check that the server was started:
ssh servera.example.com "systemctl status httpd"


#allow http traffic port 80
sudo firewall-cmd --permanent --add-service=http
sudo firewall-cmd --reload

#create playbook


mkdir templates


└── templates
    ├── httpd.conf.j2
    └── index.html.j2

#sites.yml

---
- hosts: web
  name: Install the web server and start it
  become: yes
  vars:
    httpd_packages:
      - httpd
      - mod_wsgi
    apache_test_message: This is a test message
    apache_max_keep_alive_requests: 115

  tasks:
    - name: Install the apache web server
      yum:
        name: "{{ item }}"
        state: present
      with_items: "{{ httpd_packages }}"
      notify: restart apache service

    - name: Generate apache's configuration file from jinja2 template
      template:
        src: templates/httpd.conf.j2
        dest: /etc/httpd/conf/httpd.conf
      notify: restart apache service

    - name: Generate a basic homepage from jinja2 template
      template:
        src: templates/index.html.j2
        dest: /var/www/html/index.html

    - name: Start the apache web server
      service:
        name: httpd
        state: started
        enabled: yes

  handlers:
    - name: restart apache service
      service:
        name: httpd
        state: restarted
        enabled: yes


#httpd.conf.j2

ServerRoot "/etc/httpd"
Listen 80
Include conf.modules.d/*.conf
User apache
Group apache
ServerAdmin root@localhost
<Directory />
    AllowOverride none
    Require all denied
</Directory>
DocumentRoot "/var/www/html"
<Directory "/var/www">
    AllowOverride None
    Require all granted
</Directory>
<Directory "/var/www/html">
    Options Indexes FollowSymLinks
    AllowOverride None
    Require all granted
</Directory>
<IfModule dir_module>
    DirectoryIndex index.html
</IfModule>
<Files ".ht*">
    Require all denied
</Files>
ErrorLog "logs/error_log"
MaxKeepAliveRequests {{ apache_max_keep_alive_requests }}
LogLevel warn
<IfModule log_config_module>
    LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
    LogFormat "%h %l %u %t \"%r\" %>s %b" common
    <IfModule logio_module>
      LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\" %I %O" combinedio
    </IfModule>
    CustomLog "logs/access_log" combined
</IfModule>
<IfModule alias_module>
    ScriptAlias /cgi-bin/ "/var/www/cgi-bin/"
</IfModule>
<Directory "/var/www/cgi-bin">
    AllowOverride None
    Options None
    Require all granted
</Directory>
<IfModule mime_module>
    TypesConfig /etc/mime.types
    AddType application/x-compress .Z
    AddType application/x-gzip .gz .tgz
    AddType text/html .shtml
    AddOutputFilter INCLUDES .shtml
</IfModule>
AddDefaultCharset UTF-8
<IfModule mime_magic_module>
    MIMEMagicFile conf/magic
</IfModule>
EnableSendfile on
IncludeOptional conf.d/*.conf




#index.html.j2

{{ apache_test_message }} {{ ansible_distribution }} {{ ansible_distribution_version }}  <br>
Current Host: {{ ansible_hostname }} <br>
Server list: <br>
{% for host in groups['web'] %}
{{ host }} <br>
{% endfor %}


#run playbook

ansible-playbook site.yml

#Confirm that the web server responds and serves the index.html file generated by Ansible:

curl servera.example.com











#TOWER

#Install Ansible Packages and Enable EPEL Repository

subscription-manager attach --pool=`subscription-manager list --all --available --matches "*Extra Packages*" --pool-only`


#download Ansible Tower from https://releases.ansible.com/ansible-tower/setup/

yum install -y wget
wget https://releases.ansible.com/ansible-tower/setup/ansible-tower-setup-latest.tar.gz
tar -xvzf ansible-tower-setup-latest.tar.gz
cd ansible-tower-setup-*


#Edit the inventory file to look exactly like the following:

[primary]
localhost ansible_connection=local

[secondary]

[database]

[all:vars]
admin_password='redhat'
pg_password='redhat'
rabbitmq_password='redhat'
redis_password='redhat'

pg_host=''
pg_port=''

pg_database='awx'
pg_username='awx'

#Launch the Ansible Tower setup script:
./setup.sh

#Change the ownership of files present in /var/log/tower/ directory from root user to awx user.
chown -R awx:awx /var/log/tower/

#Attach the Extra Packages pool to make Ansible packages available:
subscription-manager register
subscription-manager subscribe
subscription-manager attach --pool=`subscription-manager list --all --available --matches "*Extra Packages*" --pool-only`

yum -y install ansible

ansible --version

vi /etc/ansible/hosts

[web]
servera.example.com

[sql]
serverb.example.com


ssh-copy-id -i .ssh/open servera.example.com
ssh-copy-id -i .ssh/open serverb.example.com

ansible -m ping all

#Use an ad hoc command to get the list of facts available for servera:
ansible web -m setup

#Install an Apache server on the web server (servera):
ansible web -b -m yum -a "name=httpd state=present"


#Manually confirm that the package was installed:
ssh servera.example.com "rpm -qa | grep httpd-[0-9]*"

#Start the Apache server:
ansible web -b -m service -a "name=httpd state=started"

#Manually check that the server was started:
ssh servera.example.com "systemctl status httpd"


#allow http traffic port 80
sudo firewall-cmd --permanent --add-service=http
sudo firewall-cmd --reload

#create playbook


mkdir templates


└── templates
    ├── httpd.conf.j2
    └── index.html.j2

#sites.yml

---
- hosts: web
  name: Install the web server and start it
  become: yes
  vars:
    httpd_packages:
      - httpd
      - mod_wsgi
    apache_test_message: This is a test message
    apache_max_keep_alive_requests: 115

  tasks:
    - name: Install the apache web server
      yum:
        name: "{{ item }}"
        state: present
      with_items: "{{ httpd_packages }}"
      notify: restart apache service

    - name: Generate apache's configuration file from jinja2 template
      template:
        src: templates/httpd.conf.j2
        dest: /etc/httpd/conf/httpd.conf
      notify: restart apache service

    - name: Generate a basic homepage from jinja2 template
      template:
        src: templates/index.html.j2
        dest: /var/www/html/index.html

    - name: Start the apache web server
      service:
        name: httpd
        state: started
        enabled: yes

  handlers:
    - name: restart apache service
      service:
        name: httpd
        state: restarted
        enabled: yes


#httpd.conf.j2

ServerRoot "/etc/httpd"
Listen 80
Include conf.modules.d/*.conf
User apache
Group apache
ServerAdmin root@localhost
<Directory />
    AllowOverride none
    Require all denied
</Directory>
DocumentRoot "/var/www/html"
<Directory "/var/www">
    AllowOverride None
    Require all granted
</Directory>
<Directory "/var/www/html">
    Options Indexes FollowSymLinks
    AllowOverride None
    Require all granted
</Directory>
<IfModule dir_module>
    DirectoryIndex index.html
</IfModule>
<Files ".ht*">
    Require all denied
</Files>
ErrorLog "logs/error_log"
MaxKeepAliveRequests {{ apache_max_keep_alive_requests }}
LogLevel warn
<IfModule log_config_module>
    LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
    LogFormat "%h %l %u %t \"%r\" %>s %b" common
    <IfModule logio_module>
      LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\" %I %O" combinedio
    </IfModule>
    CustomLog "logs/access_log" combined
</IfModule>
<IfModule alias_module>
    ScriptAlias /cgi-bin/ "/var/www/cgi-bin/"
</IfModule>
<Directory "/var/www/cgi-bin">
    AllowOverride None
    Options None
    Require all granted
</Directory>
<IfModule mime_module>
    TypesConfig /etc/mime.types
    AddType application/x-compress .Z
    AddType application/x-gzip .gz .tgz
    AddType text/html .shtml
    AddOutputFilter INCLUDES .shtml
</IfModule>
AddDefaultCharset UTF-8
<IfModule mime_magic_module>
    MIMEMagicFile conf/magic
</IfModule>
EnableSendfile on
IncludeOptional conf.d/*.conf




#index.html.j2

{{ apache_test_message }} {{ ansible_distribution }} {{ ansible_distribution_version }}  <br>
Current Host: {{ ansible_hostname }} <br>
Server list: <br>
{% for host in groups['web'] %}
{{ host }} <br>
{% endfor %}


#run playbook

ansible-playbook site.yml

#Confirm that the web server responds and serves the index.html file generated by Ansible:

curl servera.example.com











#TOWER

#Install Ansible Packages and Enable EPEL Repository

subscription-manager attach --pool=`subscription-manager list --all --available --matches "*Extra Packages*" --pool-only`


#download Ansible Tower from https://releases.ansible.com/ansible-tower/setup/

yum install -y wget
wget https://releases.ansible.com/ansible-tower/setup/ansible-tower-setup-latest.tar.gz
tar -xvzf ansible-tower-setup-latest.tar.gz
cd ansible-tower-setup-*


#Edit the inventory file to look exactly like the following:

[primary]
localhost ansible_connection=local

[secondary]

[database]

[all:vars]
admin_password='redhat'
pg_password='redhat'
rabbitmq_password='redhat'
redis_password='redhat'

pg_host=''
pg_port=''

pg_database='awx'
pg_username='awx'

#Launch the Ansible Tower setup script:
./setup.sh

#Change the ownership of files present in /var/log/tower/ directory from root user to awx user.
chown -R awx:awx /var/log/tower/

